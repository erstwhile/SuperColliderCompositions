Environment[ ('notesFunc' -> { |i,il,ill|
  var n = [8,128/7,32/3,24,27,28,4,20,6,30,36,45,54].permute(il.sort.reverse.wrapAt(ill.reverse.sort[1].asInt.factors.reverse[0]).asInt);
  n
}), ('iB' -> SCTextField.new), ('clock' -> TempoClock.new), ('iFils' -> SCTextField.new), ('iFac' -> SCTextField.new), 
  ('atkFunc' -> {|i, ill, k, j, pp|
  (1/(1+ill.wrapAt(k).asInt.factors.reverse[0]))*((1/(2**12)) * (i.factors[j]*pp.log10) * (1/(i.log*2)));
}), ('mylib' -> SynthDescLib.new), ('iT' -> SCTextField.new), ('iI' -> SCTextField.new), ('incrementFunc' -> {|i,d,n|
  (i+(2**n)).asInt;
}), 
  ('unique' -> {|a|var t = Array.fill(a.size);
a.collect({|i,j|(t.includes(i)).if({t.put(j,nil)}, {t.put(j,a[j])})}).reject({|i|i==nil});
t.reject({|i|i==nil});
}), ('susFunc' -> {|i,j,k,l|
  -1 * i.factors.wrapAt(j+k+l).log10;
}), ('iCPU' -> SCTextField.new), ('relFunc' -> {|i, ill, p, pp| 
    [
      {((4/(4+(i.log/16).floor))*((26)/(1+pp).log)/i.log10)*~tempo;},           
      {((4/(4+(i.log/16).floor))*((0.7)*(1+p).log)/i.log10)*~tempo;}
    ].wrapAt(ill.reverse.wrapAt(i.log10.ceil+1)).value;
}), ('iF' -> SCTextField.new), 
  ('kFunc' -> {|i,il,ill,j,p|
  3;
}), ('archive' -> {|f|
var path,a;
path = "/Users/thomasgillis/dev/supercollider/sc/scd/compositions/continuation_and_closure/archive/"++f.asString;
//create the temp dir
Routine {
Pipe.new("mkdir "++path,"w");
0.1.wait;

Pipe.new("chmod -R 777 "++path,"w");
0.1.wait;

a=File(path++"/_keys.scd","w");
a.write(currentEnvironment.keys.asCompileString.asString);
a.close;
0.1.wait;
{a=File(path++"/_currentEnvironment.scd","w");
a.write(currentEnvironment.asCompileString.asString);
a.close;}.defer;
0.1.wait;

currentEnvironment.keys.do({|x|
  (currentEnvironment.at(x).isFunction).if({
    currentEnvironment.at(x).writeArchive(path++"/"++x.asString++".scd");
    0.1.wait;
  })
});

}.play;
}), ('pitchFunc' -> {|i, il, ill, p, j, k, x, n, l|
  var qq, js;
qq=[2,n.collect({|x|(2*x)/(x.nextPowerOfTwo)}).flat.wrapAt(ill.orderFunc(i).reverse.wrapAt(i.factors.reverse[0]).asInt.factors[0])].wrapAt(ill.orderFunc(i).reverse[1]);
  qq = qq * (n.collect({|x|(2*x)/(x.nextPowerOfTwo)}).wrapAt(ill.reverse[0].asInt.factors[0]));
  js = j * [(1+(ill.orderFunc(i).reverse.wrapAt(i.factors.reverse[0].log2)))%2].wrapAt(ill.reverse[0]);

  ((8/7)*(p *(2**((i.log10.floor+i.log2.floor+i.factors.size)%(i.log10.floor.asInt))) *.x n[0..i.factors.reverse[0].log10.ceil.asInt.clip(1,32)].wrapAt((js+l))* qq) * 
  [((2*l)+1),(l+1),2**l,1/2**l,(l.nthPrime / l.nthPrime.nextPowerOfTwo),1/(l.nthPrime / l.nthPrime.nextPowerOfTwo)].permute(ill.reverse[0].asInt).wrapAt(ill.orderFunc(i).reverse[4].asInt.factors.reverse[0])  * 
  (1+(2*(k%ill.orderFunc(i).reverse[1].asInt.factors.reverse[0]))))
}), ('bufsize' -> 94500.0), ('waitFunc' -> {|i,il,ill|{|pp,i|[pp.log2.ceil/3,pp.log2.ceil/2].wrapAt(i.factors.sum)/(2**i.factors.size)}}), 
  ('running' -> Dictionary[ (291758 -> 1), (290660 -> 1), (290968 -> 1), (291693 -> 1), (291509 -> 1), 
  (282271 -> 1), (291307 -> 1), (291234 -> 1), (291333 -> 1), (291366 -> 1), 
  (282416 -> 1), (282316 -> 1), (282330 -> 1), (291237 -> 1), (291454 -> 1), 
  (291803 -> 1), (290945 -> 1), (287530 -> 1), (291653 -> 1), (290616 -> 1), 
  (291561 -> 1), (290939 -> 1), (291547 -> 1), (290604 -> 1), (291520 -> 1), 
  (290585 -> 1), (291456 -> 1), (291329 -> 1), (291572 -> 1), (287598 -> 1), 
  (287614 -> 1), (291205 -> 1), (291700 -> 1), (291510 -> 1), (291214 -> 1), 
  (291516 -> 1), (291822 -> 1), (290992 -> 1), (291226 -> 1), (291726 -> 1), 
  (290626 -> 1), (287437 -> 1), (287601 -> 1), (291768 -> 1), (291715 -> 1), 
  (291811 -> 1), (291541 -> 1), (287422 -> 1), (291449 -> 1), (282231 -> 1), 
  (291502 -> 1), (287459 -> 1), (290463 -> 1), (291721 -> 1), (291507 -> 1), 
  (282329 -> 1), (282299 -> 1), (291545 -> 1), (287514 -> 1), (282424 -> 1), 
  (287424 -> 1), (291857 -> 1), (291709 -> 1), (291325 -> 1), (287607 -> 1), 
  (291373 -> 1), (291314 -> 1), (291556 -> 1), (291756 -> 1), (291370 -> 1), 
  (282281 -> 1), (291501 -> 1), (290859 -> 1), (291236 -> 1), (291828 -> 1), 
  (291372 -> 1), (290955 -> 1), (291486 -> 1), (287597 -> 1), (282414 -> 1), 
  (290986 -> 1), (291702 -> 1), (290504 -> 1), (290648 -> 1), (291500 -> 1), 
  (291537 -> 1), (291512 -> 1), (291287 -> 1), (291720 -> 1), (291365 -> 1), 
  (287520 -> 1), (291271 -> 1), (290972 -> 1), (290505 -> 1), (287478 -> 1), 
  (291763 -> 1), (287523 -> 1), (287415 -> 1), (291797 -> 1), (282292 -> 1), 
  (291508 -> 1), (287436 -> 1), (291416 -> 1), (291687 -> 1), (290883 -> 1), 
  (287474 -> 1), (291674 -> 1), (290951 -> 1), (287602 -> 1), (291818 -> 1), 
  (287414 -> 1), (291249 -> 1), (291239 -> 1), (282269 -> 1), (287488 -> 1), 
  (291690 -> 1), (290425 -> 1), (290966 -> 1), (291293 -> 1), (291356 -> 1), 
  (291471 -> 1), (291729 -> 1), (291495 -> 1), (291669 -> 1), (290999 -> 1), 
  (291243 -> 1), (282270 -> 1), (282383 -> 1), (290419 -> 1), (282273 -> 1), 
  (291799 -> 1), (291522 -> 1), (282272 -> 1), (287430 -> 1), (291324 -> 1), 
  (291397 -> 1), (291233 -> 1), (291839 -> 1), (291469 -> 1), (291261 -> 1), 
  (291483 -> 1), (291511 -> 1), (291665 -> 1), (291288 -> 1), (282250 -> 1), 
  (282295 -> 1), (291625 -> 1), (291260 -> 1), (287499 -> 1), (290432 -> 1), 
  (290619 -> 1), (291814 -> 1), (291539 -> 1), (290640 -> 1), (291836 -> 1), 
  (291582 -> 1), (282249 -> 1), (282341 -> 1), (291457 -> 1), (291544 -> 1), 
  (287411 -> 1), (291728 -> 1), (291010 -> 1), (291447 -> 1), (291854 -> 1), 
  (287469 -> 1), (287438 -> 1), (291011 -> 1), (287586 -> 1), (290464 -> 1), 
  (290442 -> 1), (291829 -> 1), (282232 -> 1), (291390 -> 1), (291531 -> 1), 
  (291383 -> 1), (282415 -> 1), (291300 -> 1), (291338 -> 1), (291376 -> 1), 
  (291413 -> 1), (290590 -> 1), (291856 -> 1), (291479 -> 1), (291405 -> 1), 
  (290316 -> 1), (291527 -> 1), (291680 -> 1), (291308 -> 1), (287473 -> 1), 
  (291825 -> 1), (282233 -> 1), (282289 -> 1), (282301 -> 1), (290424 -> 1), 
  (291272 -> 1), (291367 -> 1), (282423 -> 1), (290977 -> 1), (291788 -> 1), 
  (287608 -> 1), (291453 -> 1), (291395 -> 1), (291295 -> 1), (290963 -> 1), 
  (287432 -> 1), (291304 -> 1), (291549 -> 1), (287498 -> 1), (282342 -> 1), 
  (291863 -> 1), (291598 -> 1), (291264 -> 1), (291455 -> 1), (291817 -> 1), 
  (291568 -> 1), (291392 -> 1), (291478 -> 1), (291450 -> 1), (290623 -> 1), 
  (290624 -> 1), (282230 -> 1), (291496 -> 1), (290606 -> 1), (291535 -> 1), 
  (291472 -> 1), (291558 -> 1), (291225 -> 1), (290979 -> 1), (290965 -> 1), 
  (291823 -> 1), (291374 -> 1), (290423 -> 1), (282263 -> 1), (287542 -> 1), 
  (291425 -> 1), (291518 -> 1), (291321 -> 1), (287564 -> 1), (291757 -> 1), 
  (290650 -> 1), (291335 -> 1), (291851 -> 1), (291494 -> 1), (291696 -> 1), 
  (291470 -> 1), (282276 -> 1), (291654 -> 1), (290846 -> 1), (291375 -> 1), 
  (290981 -> 1), (291221 -> 1), (291557 -> 1), (291409 -> 1), (291546 -> 1), 
  (290417 -> 1), (291755 -> 1), (291730 -> 1), (287540 -> 1), (291694 -> 1), 
  (291706 -> 1), (291855 -> 1), (291439 -> 1), (291273 -> 1), (291801 -> 1), 
  (291676 -> 1), (291394 -> 1), (287590 -> 1), (282315 -> 1), (290848 -> 1), 
  (282314 -> 1), (291001 -> 1), (291810 -> 1), (291571 -> 1), (291833 -> 1), 
  (291441 -> 1), (291013 -> 1), (291751 -> 1), (282413 -> 1), (291440 -> 1), 
  (290329 -> 1), (282288 -> 1), (282265 -> 1), (291418 -> 1), (287506 -> 1), 
  (287567 -> 1), (291639 -> 1), (291701 -> 1), (291464 -> 1), (291864 -> 1), 
  (290863 -> 1), (282304 -> 1), (291812 -> 1), (291235 -> 1), (291573 -> 1), 
  (290884 -> 1), (282257 -> 1), (291207 -> 1), (291448 -> 1), (282411 -> 1), 
  (282264 -> 1), (290476 -> 1), (290952 -> 1), (291722 -> 1), (291424 -> 1), 
  (291480 -> 1), (291659 -> 1), (291328 -> 1), (290620 -> 1), (291414 -> 1), 
  (287458 -> 1), (282412 -> 1), (290953 -> 1), (291723 -> 1), (287611 -> 1), 
  (291384 -> 1), (291853 -> 1), (287596 -> 1), (287406 -> 1), (290457 -> 1), 
  (291433 -> 1), (291491 -> 1), (291667 -> 1), (291284 -> 1), (291716 -> 1), 
  (287416 -> 1), (290847 -> 1), (291586 -> 1), (291533 -> 1), (290844 -> 1), 
  (291802 -> 1), (291357 -> 1), (290617 -> 1), (291341 -> 1), (282384 -> 1), 
  (287429 -> 1), (291704 -> 1), (291204 -> 1), (291662 -> 1), (291695 -> 1), 
  (291705 -> 1), (291266 -> 1), (291656 -> 1), (291564 -> 1), (290430 -> 1), 
  (291658 -> 1), (290665 -> 1), (287522 -> 1), (290983 -> 1), (291498 -> 1), 
  (291265 -> 1), (282226 -> 1), (282328 -> 1), (290317 -> 1), (291313 -> 1), 
  (291306 -> 1), (287500 -> 1), (291317 -> 1), (291492 -> 1), (291466 -> 1), 
  (287479 -> 1), (291446 -> 1), (291312 -> 1), (287455 -> 1), (291832 -> 1), 
  (291819 -> 1), (287453 -> 1), (290991 -> 1), (287427 -> 1), (291465 -> 1), 
  (282260 -> 1), (287569 -> 1), (291008 -> 1), (291685 -> 1), (290487 -> 1), 
  (291678 -> 1), (291382 -> 1), (291806 -> 1), (291524 -> 1), (291294 -> 1), 
  (291850 -> 1), (282262 -> 1), (291009 -> 1), (290998 -> 1), (291542 -> 1), 
  (291223 -> 1), (282267 -> 1), (287444 -> 1), (291224 -> 1), (291840 -> 1), 
  (291550 -> 1), (291815 -> 1), (291417 -> 1), (290649 -> 1), (290618 -> 1), 
  (290967 -> 1), (291666 -> 1), (291686 -> 1), (291538 -> 1), (291640 -> 1), 
  (291862 -> 1), (290447 -> 1), (290603 -> 1), (290429 -> 1), (291241 -> 1), 
  (291670 -> 1), (287433 -> 1), (291790 -> 1), (282274 -> 1), (291489 -> 1), 
  (282435 -> 1), (290449 -> 1), (291371 -> 1), (282280 -> 1), (291262 -> 1), 
  (290462 -> 1), (290882 -> 1), (282293 -> 1), (282348 -> 1), (291462 -> 1), 
  (291562 -> 1), (291319 -> 1), (291583 -> 1), (291212 -> 1), (291769 -> 1), 
  (290974 -> 1), (291488 -> 1), (291642 -> 1), (291579 -> 1), (291427 -> 1), 
  (282259 -> 1), (291463 -> 1), (291481 -> 1), (291269 -> 1), (291655 -> 1), 
  (291388 -> 1), (291490 -> 1), (291393 -> 1), (282261 -> 1), (291786 -> 1), 
  (290976 -> 1), (287421 -> 1), (287516 -> 1), (282331 -> 1), (291813 -> 1), 
  (290458 -> 1), (290973 -> 1), (291577 -> 1), (287462 -> 1), (291415 -> 1), 
  (291816 -> 1), (291423 -> 1), (291353 -> 1), (291820 -> 1), (287472 -> 1), 
  (291555 -> 1), (291403 -> 1), (291419 -> 1), (291554 -> 1), (291574 -> 1), 
  (290632 -> 1), (291285 -> 1), (291567 -> 1), (282410 -> 1), (291684 -> 1), 
  (291760 -> 1), (282268 -> 1), (290956 -> 1), (291476 -> 1), (291660 -> 1), 
  (291827 -> 1), (291861 -> 1), (290639 -> 1), (287599 -> 1), (291316 -> 1), 
  (290663 -> 1), (291843 -> 1), (282246 -> 1), (291717 -> 1), (291585 -> 1), 
  (291503 -> 1), (282335 -> 1), (291563 -> 1), (282300 -> 1), (291858 -> 1), 
  (291431 -> 1), (291809 -> 1), (291422 -> 1), (290661 -> 1), (291668 -> 1), 
  (291566 -> 1), (287532 -> 1), (287491 -> 1), (282338 -> 1), (291487 -> 1), 
  (291437 -> 1), (291528 -> 1), (291663 -> 1), (290985 -> 1), (291467 -> 1), 
  (290448 -> 1), (291445 -> 1), (291800 -> 1), (291286 -> 1), (287513 -> 1), 
  (287435 -> 1), (291434 -> 1), (291468 -> 1), (291339 -> 1), (291536 -> 1), 
  (290971 -> 1), (291724 -> 1), (287528 -> 1), (291688 -> 1), (282283 -> 1), 
  (287541 -> 1), (291326 -> 1), (291713 -> 1), (282303 -> 1), (291844 -> 1), 
  (291623 -> 1), (291369 -> 1), (291426 -> 1), (287413 -> 1), (291402 -> 1), 
  (291385 -> 1), (287484 -> 1), (291671 -> 1), (291830 -> 1), (282245 -> 1), 
  (287423 -> 1), (290990 -> 1), (291570 -> 1), (291337 -> 1), (291267 -> 1), 
  (291530 -> 1), (291597 -> 1), (287440 -> 1), (290474 -> 1), (291559 -> 1), 
  (291474 -> 1), (291596 -> 1), (290509 -> 1), (291315 -> 1), (291661 -> 1), 
  (291808 -> 1), (287606 -> 1), (291460 -> 1), (291804 -> 1), (291824 -> 1), 
  (290440 -> 1), (291692 -> 1), (291248 -> 1), (291784 -> 1), (291785 -> 1), 
  (291497 -> 1), (291343 -> 1), (282321 -> 1), (291749 -> 1), (291703 -> 1), 
  (291203 -> 1), (290433 -> 1), (291254 -> 1), (290488 -> 1), (282340 -> 1), 
  (291841 -> 1), (282287 -> 1), (287446 -> 1), (287517 -> 1), (291213 -> 1), 
  (291672 -> 1), (291406 -> 1), (290854 -> 1), (290941 -> 1), (291638 -> 1), 
  (291396 -> 1), (291340 -> 1), (290964 -> 1), (291770 -> 1), (290630 -> 1), 
  (291673 -> 1), (291311 -> 1), (290993 -> 1), (291359 -> 1), (287405 -> 1), 
  (287464 -> 1), (290664 -> 1), (291499 -> 1), (290975 -> 1), (291838 -> 1), 
  (291451 -> 1), (282279 -> 1), (290997 -> 1), (287476 -> 1), (291767 -> 1), 
  (291525 -> 1), (291679 -> 1), (282336 -> 1), (282277 -> 1), (290327 -> 1), 
  (287588 -> 1), (287483 -> 1), (290954 -> 1), (291521 -> 1), (291242 -> 1), 
  (291821 -> 1), (291401 -> 1), (291782 -> 1), (282422 -> 1), (282285 -> 1), 
  (290507 -> 1), (291664 -> 1), (291712 -> 1), (291707 -> 1), (291581 -> 1), 
  (290978 -> 1), (290608 -> 1), (291718 -> 1), (291727 -> 1), (291461 -> 1), 
  (291714 -> 1), (290858 -> 1), (291391 -> 1), (291848 -> 1), (282337 -> 1), 
  (290645 -> 1), (291826 -> 1), (291222 -> 1), (291849 -> 1), (282225 -> 1), 
  (282247 -> 1), (282432 -> 1), (290662 -> 1), (290434 -> 1), (291552 -> 1), 
  (291368 -> 1), (290497 -> 1), (291389 -> 1), (291708 -> 1), (291386 -> 1), 
  (290853 -> 1), (282349 -> 1), (291438 -> 1), (291852 -> 1), (282320 -> 1), 
  (290508 -> 1), (287524 -> 1), (291553 -> 1), (282235 -> 1), (287512 -> 1), 
  (291575 -> 1), (287456 -> 1), (287595 -> 1), (290995 -> 1), (291759 -> 1), 
  (291540 -> 1), (291342 -> 1), (291408 -> 1), (291787 -> 1), (290418 -> 1), 
  (287490 -> 1), (291514 -> 1), (291421 -> 1), (291771 -> 1), (290970 -> 1), 
  (287585 -> 1), (291699 -> 1), (287445 -> 1), (282254 -> 1), (291578 -> 1), 
  (291569 -> 1), (291000 -> 1), (291291 -> 1), (282302 -> 1), (291681 -> 1), 
  (290969 -> 1), (291762 -> 1), (290984 -> 1), (291360 -> 1), (291336 -> 1), 
  (291580 -> 1), (291378 -> 1), (290443 -> 1), (282234 -> 1), (291698 -> 1), 
  (290438 -> 1), (287519 -> 1), (287426 -> 1), (287412 -> 1), (287487 -> 1), 
  (287463 -> 1), (287468 -> 1), (290573 -> 1), (291458 -> 1), (291244 -> 1), 
  (291506 -> 1), (291534 -> 1), (291459 -> 1), (282258 -> 1), (287471 -> 1), 
  (290860 -> 1), (291270 -> 1), (291482 -> 1), (291256 -> 1), (291719 -> 1), 
  (287470 -> 1), (290586 -> 1), (291859 -> 1), (287485 -> 1), (287529 -> 1), 
  (291484 -> 1), (287587 -> 1), (291379 -> 1), (290862 -> 1), (291289 -> 1), 
  (282256 -> 1), (282347 -> 1), (291444 -> 1), (287589 -> 1), (291725 -> 1), 
  (282278 -> 1), (290489 -> 1), (287454 -> 1), (290631 -> 1), (287510 -> 1), 
  (290490 -> 1), (291228 -> 1), (290646 -> 1), (291330 -> 1), (287584 -> 1), 
  (291565 -> 1), (287383 -> 1), (291334 -> 1), (282266 -> 1), (290439 -> 1), 
  (291475 -> 1), (287515 -> 1), (287521 -> 1), (287457 -> 1), (290496 -> 1), 
  (291443 -> 1), (287505 -> 1), (290946 -> 1), (291513 -> 1), (290336 -> 1), 
  (290456 -> 1), (291837 -> 1), (291452 -> 1), (291263 -> 1), (291519 -> 1), 
  (291331 -> 1), (290486 -> 1), (291697 -> 1), (290982 -> 1), (290605 -> 1), 
  (291683 -> 1), (291310 -> 1), (287477 -> 1), (282417 -> 1), (291299 -> 1), 
  (291584 -> 1), (290575 -> 1), (291689 -> 1), (282291 -> 1), (291227 -> 1), 
  (291358 -> 1), (291252 -> 1), (290625 -> 1), (287407 -> 1), (282290 -> 1), 
  (287466 -> 1), (291576 -> 1), (291805 -> 1), (290491 -> 1), (291305 -> 1), 
  (290328 -> 1), (291381 -> 1), (291477 -> 1), (291361 -> 1), (291229 -> 1), 
  (290647 -> 1), (291845 -> 1), (291515 -> 1), (290574 -> 1), (287600 -> 1), 
  (287434 -> 1), (291208 -> 1), (287425 -> 1), (291523 -> 1), (291505 -> 1), 
  (282275 -> 1), (291504 -> 1), (291691 -> 1), (287566 -> 1), (290441 -> 1), 
  (291436 -> 1), (291332 -> 1), (290861 -> 1), (291377 -> 1), (291710 -> 1), 
  (290843 -> 1), (287504 -> 1), (290337 -> 1), (291831 -> 1), (291206 -> 1), 
  (282294 -> 1), (290315 -> 1), (287467 -> 1), (291847 -> 1), (287613 -> 1), 
  (282436 -> 1), (290980 -> 1), (291387 -> 1), (291560 -> 1), (290994 -> 1), 
  (291682 -> 1), (287475 -> 1), (290495 -> 1), (290607 -> 1), (291320 -> 1), 
  (291842 -> 1), (291404 -> 1), (291301 -> 1), (291435 -> 1), (291532 -> 1), 
  (291783 -> 1), (287486 -> 1), (291255 -> 1), (290622 -> 1), (290338 -> 1), 
  (291318 -> 1), (291442 -> 1), (291302 -> 1), (287439 -> 1), (282282 -> 1), 
  (291432 -> 1), (282434 -> 1), (291641 -> 1), (291798 -> 1), (282343 -> 1), 
  (287382 -> 1), (291526 -> 1), (291322 -> 1), (291643 -> 1), (291711 -> 1), 
  (282255 -> 1), (291407 -> 1), (287431 -> 1), (290506 -> 1), (291750 -> 1), 
  (290845 -> 1), (282286 -> 1), (291473 -> 1), (291253 -> 1), (290996 -> 1), 
  (290947 -> 1), (291529 -> 1), (290940 -> 1), (291548 -> 1), (291657 -> 1), 
  (291865 -> 1), (291354 -> 1), (291517 -> 1), (291485 -> 1), (287568 -> 1), 
  (291274 -> 1), (287533 -> 1), (290587 -> 1), (287612 -> 1), (291380 -> 1), 
  (287531 -> 1), (291846 -> 1), (291238 -> 1), (291309 -> 1), (291543 -> 1), 
  (291677 -> 1), (291268 -> 1), (291251 -> 1), (291789 -> 1), (282418 -> 1), 
  (291761 -> 1), (282433 -> 1), (291240 -> 1), (282248 -> 1), (291675 -> 1), 
  (291624 -> 1), (291834 -> 1), (282284 -> 1), (287428 -> 1), (290641 -> 1), 
  (291323 -> 1), (290852 -> 1), (290589 -> 1), (291292 -> 1), (291303 -> 1), 
  (291420 -> 1), (290588 -> 1), (291772 -> 1), (290475 -> 1), (290621 -> 1), 
  (287565 -> 1), (291493 -> 1), (291551 -> 1), (291860 -> 1), (282339 -> 1), 
  (290615 -> 1), (287511 -> 1), (291355 -> 1), (287420 -> 1), (291835 -> 1), 
  (282431 -> 1), (291290 -> 1), (290431 -> 1), (291327 -> 1), (287518 -> 1), 
  (291250 -> 1), (287489 -> 1), (291807 -> 1), (291012 -> 1) ]), ('lFunc' -> {|i,il,ill,j,k,p|
  var z = Server.default.peakCPU, n,r,s;
  s=(Server.default.numSynths.asInt+2).log2.floor.asInt;
  (z > 80).if ({
    n = ~running.keys.asArray.at(0);
    ~running.removeAt(n);
    //query all nodes
    //kill the oldest
//    Server.default.sendMsg("/n_free", n);
    Server.default.sendMsg("/n_set", n, "gate",0);
  });
  r = (Server.default.numSynths < 800).if({(11 - (s)).clip(0,5);},{1});
  (Server.default.numSynths < 950).if({r},{0});

}), ('b' -> [ Buffer.new, Buffer.new, Buffer.new, Buffer.new, Buffer.new, Buffer.new, Buffer.new, Buffer.new, Buffer.new, Buffer.new, Buffer.new, Buffer.new, Buffer.new, Buffer.new, Buffer.new, Buffer.new, Buffer.new, Buffer.new, Buffer.new, Buffer.new, Buffer.new, Buffer.new, Buffer.new, Buffer.new, Buffer.new, Buffer.new, Buffer.new, Buffer.new, Buffer.new, Buffer.new, Buffer.new, Buffer.new ]), ('z' -> {3}), ('r' -> Routine({
8.do({|n|  
  var a;
  a = (2**(n +12)).asInt;
  ~i =a;
  (2**13).asInt.do({|x|
      var i=~i;
      ~play.value(a+i.asInt,x.asInt);
      ~i = ~incrementFunc.value(i.asInt,a,n);
      {~iX.string = x;}.defer;
    });
  });
240.wait;
z.freeAll;
})), 
  ('inc' -> {|i,d|
	var a = ((2**(d.log2.ceil - 11)));
	(i+a).asInt ;
}), ('w' -> [ {|p,i|(16/3)*p.log2.ceil/p.log2.ceil.nextPowerOfTwo} ]), ('pFunc' -> {|ill, ils, p|
    p=p.nextPowerOfTwo;
  (p > (ils**ill.reverse[0])).if({p =p /(2**((ill.reverse[0]/2).ceil.asInt))});    
  (p <2).if ({2},{p});
}), ('allServers' -> Set[ Server.fromName('internal'), Server.fromName('localhost') ]), ('ampFunc' -> {|i,p,pp,l,k|
      var c1, c2;
      c1 = 2 + (i.log2-i.log2.floor);
      c2 = (10**(2+(i.log2-i.log2.floor)));

      ((c1/((p+c2).log10))
      *((1/((p+(10)).log10)) )
      * 6  * (1/(l+1)) * (1/(k+3).log)
      *(p.sqrt 
      * (c1/(pp+c2).log10)))
    }), 
  ('panFunc' -> {|i, j, ii,k,l|
  ((1/(i.factors.size)) * (-1**(ii+j)) + (((2+k.log2)-1)**(-1**(k+l))) - (((2+l.log2)-1)**(-1**(k+l)))).clip(-0.5,0.25)
}), ('i' -> 4941), ('n' -> OSCresponderNode.new), ('countingFunc' -> {|i, il, ill|
  var ils = 2-(i.log2-i.log2.floor),fils,iFunc, il2 = (i.log2-i.log2.floor), lt,f=0;
  lt = ill.orderFunc(i).reverse[1].asInt.factors.reverse[0];
  {~iF.string = "il2"+il2; ~iFils.string = lt;  ~iB.string = ill.sum; ~iT.string = "test: "+((ill.sum**il2)*il2)}.defer;

  f=(((ill.sum**il2)*il2) > lt).if({0},{1});
  [
  {
    fils = {|ff,l|
      var r=ff;
      l.do({
      r=r**ff;
      });
      //clip r
      r.clip(0,i.log2.ceil.asInt).floor;
    };
  
      {((ill.orderFunc(i).reject(_==0).reverse[1].asInt.factors.reverse[0].collect({|x|i%  
        il.sort.flat.reverse.wrapAt(fils.(ils,x))}).sum)).ceil.asInt}.value;
  }, 
  { 
    ( il.sort.reverse[0] + il.reverse[1] + il.sort.reverse.wrapAt(i.log10-1) 
    +(i%il.sort.reverse.wrapAt(i.log10+1))+ (i%il.sort.reverse.wrapAt(i.log10-2))).ceil.asInt;
  }].permute(ill.reverse[0].asInt).wrapAt(f).value.asInt;
  
}), ('iIll' -> SCTextField.new), 
  ('iX' -> SCTextField.new), ('play' -> {|i,x|
    var il,ill,r,ii,w,e,ils = 2-(i.log2-i.log2.floor);
    ii=i;
    il = ({|x|((2**x)*(i/(2**x)%2).floor)}!i.log2.ceil.asInt).permute(i);
    ill = (1+il).log2.floor.asInt;
    ill.addUniqueMethod(\orderFunc,{|to,i|
      var x = to.sort, il2 = i.log2 - i.log2.floor;
      x =x.permute((i**il2).asInt);
      to = (x.reverse[0]==0).if({x.sort;},{x;});
      to;
    });
    il.addUniqueMethod(\orderFunc,{|to,i|
      var x = to.sort, il2 = i.log2 - i.log2.floor;
      x =x.permute((i**il2).asInt);
      to = (x.reverse[0]==0).if({x.sort;},{x;});
      to;
    });

    e = Environment.make({~i = i; ~il = il; ~ill = ill;~x=x;});
    e.know = true;
    e.ils = ils;
    e.ii = i;
    i= ~countingFunc.valueWithEnvir(e);
    e.i = i;
    {~iIll.string = e.ill.orderFunc(e.i);}.defer;

    {~iI.string = i;}.defer;
    {~iFac.string = i.factors}.defer;
    e.hf = (i.factors.reverse[0].nextPowerOfTwo**(2+(i.log2-i.log2.floor))).nextPowerOfTwo;
    e.hf = (i.factors.reverse[0].nextPowerOfTwo**2);

    w = ~waitFunc.valueWithEnvir(e);
    e.n = ~notesFunc.valueWithEnvir(e);
    ~tempo = ((e.ill.sum/2).log2)/5;

    r = Routine {
      i=~unique.(i.factors).product;
      i.factors.do({|p,j|
        var rr;
        e.p =p; e.j =j;
        rr = Routine {
        (~kFunc.valueWithEnvir(e)).do({|k|
          e.k = k;
          e.pp = i.factors[j];
          (~lFunc.valueWithEnvir(e)).do({|l|
            var s,freq,pitchCorrect;
            s = Synth("just-sine"); 
            e.l =l; e.p = p;
            ~running.put(s.nodeID,1);
            p=~pFunc.valueWithEnvir(e);
            e.l =l; e.p = p;
            freq = ~pitchFunc.valueWithEnvir(e);
            e.freq = freq;
            freq = ~harmonicFunc.valueWithEnvir(e);
            pitchCorrect = {|f,i,safe|
              f=f.abs;
              (f < (2**14)).or(safe >20).if ({f=f;},{ f=pitchCorrect.(f / (2**( i.factors.size.clip(2,i.log.ceil.asInt))),i,safe+1);});
              f;
            };
            
            freq = pitchCorrect.(freq,i,0);
            pitchCorrect = {|f,i,safe|
              f=f.abs;
              (f > 48).or(safe>20).if ({ f=f; },{ f= pitchCorrect.(f  * (16),i,safe+1);});
              f;
            };
            freq = pitchCorrect.(freq,i,0);
            s.set(\freq, freq);
            s.set(\rel,~relFunc.valueWithEnvir(e));
            s.set(\pan,~panFunc.valueWithEnvir(e));
            s.set(\atk, ~atkFunc.valueWithEnvir(e));
            s.set(\sus, ~susFunc.valueWithEnvir(e));
            s.set(\bassCutoff, 256);
            s.set(\gate,1); 
            s.set(\amp,~ampFunc.valueWithEnvir(e));         
           });
          w.(i.factors[j],i).wait;
        });
      };
      ~clock.play(rr,0);
      });
    };
    ~clock.play(r,0);
    (1/3).wait;
}), ('tempo' -> 0.87846348455575), ('harmonicFunc' -> {|i, il, j, freq, hf,x,mod,k|
  
   freq * ((hf + (k * ([2,3,5,7,11,13,17,19,23,29,31,37,41].permute(il.reverse[0].asInt).wrapAt(j+i.factors.size))))/(hf));
}), ('panel' -> SCWindow("Values", Rect(1761.0, 354.0, 420.0, 420.0)).front;) ]